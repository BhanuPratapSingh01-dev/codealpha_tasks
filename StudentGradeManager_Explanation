As part of honing my Java programming skills, I developed a console-based Student Grade Manager using core Java. This project allows users to store, manage, and analyze student grades in a structured and interactive way. Here's a detailed breakdown of how the application works and what I learned from it:

🔧 Tools & Technologies Used:
Programming Language: Java
Data Structures: ArrayList, double[]
Input Handling: Scanner
IDE: IntelliJ / Eclipse / VS Code (you can mention your IDE here)

✅ Project Features:
Add students and their respective grades.
View all student records with grades.
Calculate overall class statistics.
View individual student performance reports.
Exit functionality with proper navigation.

🧩 Code Walkthrough
1. Initialization

ArrayList<String> studentNames
ArrayList<double[]> studentGrades
Scanner scanner
Maintains two lists: one for student names, and one for corresponding grade arrays.
Scanner is used to handle user input.

2. Main Entry Point

public static void main(String[] args) {
    System.out.println("=== Student Grade Management System ===");
    displayMenu();
}
Displays a welcoming message and invokes the displayMenu() method to start the interactive loop.

3. Menu Display and Navigation

displayMenu() {
    while (true) {
        // Display options
        // Take user input
        // Call appropriate method
    }
}
Uses a while(true) loop for continuous interaction until the user exits.
Switch case to handle various functionalities based on user input (1–5).

4. Add Student and Grades

addStudent() {
    // Take student name
    // Ask how many grades to enter
    // Store grades in an array
    // Add to lists
}
Prompts user for student name and number of grades.
Accepts and stores grades in an array.
Associates grades with the student name using parallel lists.
📌 Learning: Practiced handling dynamic arrays and input validation in Java.

5. View All Students and Grades

viewAllStudents() {
    for each student:
        print name and their grades
}
Iterates through both studentNames and studentGrades lists.
Outputs all student data in a clean, readable format.
📌 Learning: Enhanced array traversal and string formatting for clean CLI outputs.

6. Calculate Class Statistics

calculateClassStatistics() {
    // Calculate total, average, highest, lowest grades
}
Iterates through all grade arrays.
Calculates class average, highest, and lowest grades.
Displays total number of students as well.
📌 Learning: Worked with nested loops and aggregate statistical functions.

7. View Individual Student Report

viewIndividualReport() {
    // Display list of students
    // Ask for selection
    // Show student-wise report (grades, average, highest, lowest)
}
Lists all student names with an index.
User selects a student to view their detailed performance report.
Calculates and displays individual stats (average, min, max).
📌 Learning: Practiced list indexing, user validation, and conditional logic.

8. Exit Option

case 5:
    System.out.println("Exiting...");
    System.exit(0);
Gracefully exits the program when the user chooses to quit.

🧠 Key Learnings:
Mastered ArrayList usage for dynamic data handling.
Improved user input processing using Scanner.
Implemented real-world logic structuring for student performance analysis.
Enhanced my understanding of modular programming with method decomposition.

🔍 Future Enhancements:
Add file storage for data persistence (using file I/O or database).
Implement sorting and ranking of students.
Build a GUI version using Java Swing or JavaFX.
🙌 Conclusion
This project strengthened my command of core Java concepts and reinforced practical skills in algorithmic thinking, control flow, and basic software design. I'm excited to keep improving this and explore advanced features in future iterations.

📩 Feel free to connect if you'd like to collaborate or give feedback!
