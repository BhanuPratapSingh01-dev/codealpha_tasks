
 Technologies Used:

Java Swing for building the GUI (buttons, text fields, list, scroll panes).
ArrayList for dynamically storing and managing grades.
Event handling (ActionListener) to make buttons respond to user actions.
DecimalFormat for clean, readable percentage formatting.
Step-by-step Overview of What It Does:

Grade Input & Validation
Users enter a grade (0-100) into a text field. The program validates the input to ensure it’s a valid number within the allowed range.
Storing Grades
Valid grades are added to an ArrayList<Double> and displayed in a list (JList) to keep track of all entries dynamically.
Statistics Calculation
On clicking “Calculate Stats”, it:
Computes the average, highest, and lowest grades.
Categorizes all grades into buckets: F, D, C, B, A.
Displays the result in a non-editable JTextArea.
Clear Function
The “Clear All” button resets the input, output, and stored data for fresh entries.
Error Handling & UX
Uses JOptionPane to show pop-up errors if invalid inputs are entered or if stats are requested without any data.
 Learning Highlights:

Reinforced my knowledge of Java’s object-oriented design and event-driven programming.
Practiced working with collections, user input validation, and GUI layouts.
Learned how to keep the UI responsive and intuitive for end users.
 This is a perfect beginner-to-intermediate project for Java learners. Next steps could include adding data persistence (saving grades to a file or database) or improving the UI using JavaFX.
